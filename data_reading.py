"""
Data_Reading.py - contains functions and helpers to read in the data image data
for USD AAI 521 Computer Vision Final Project

Authors: Bryan Carr, Leya Joseph, Robert Salamon

Date: 7-12 Dec, 2022


"""

import numpy as np
import cv2

def parse_annotation(file_path):
    """
    parse_annotation: A helper function to parse the annotation files
        Reads in a text file as input
        Reads the lines as strings and splits the key ones by spaces
        Extracts the numbers for the bounding boxes, stored as (x, y, w, h)

    Input:
        file_path (String): file directory/pathway for the Text File containing the annotation

    Outputs:
        box_locations (array): An array containing all annotation box locations
            line [0] is the Car
            line [1] is the License Plate box
            Remaining lines are the boxes for characters on the plate
        plate (string): String containing the characters in the license plate

    :param file_path:
    :return:
    """

    with open(file_path, 'r') as f:
        lines = f.readlines() #Read in line by line
        f.close() #Close file when done

    # define car_box annotation:
    # the last 4 entries in the line (strings)
    # helper function converts to integers & array

    car_box = list_convert(lines[1].split()[1:5])

    plate_box = list_convert(lines[7].split()[1:5])

    box_locations = np.concatenate( ([car_box], [plate_box]), axis=0)

    plate = lines[6].split()[1]

    # Loop over the remaining lines - the plate characters - to build their boxes
    for l in lines[8:]:
        char_box = list_convert(l.split()[2:6])
        box_locations = np.append(box_locations, [char_box], axis=0)


    """
    print(car_box)
    print(type(car_box))
    print(plate)
    print(plate_box)
    print(box_locations)
    """

    return box_locations, plate


def list_convert(list):
    """
    list_convert: a helper function to convert a list of Strings to an Array of Integers

    input: list (strings) - a list of numbers in string dtypes

    return: converted_array (array) - the same list, converted to an Array of Integer dtypes
    """
    converted_array = np.array([int(i) for i in list])

    return converted_array

def draw_boxes(boxes, image_path):
    """
    draw_boxes: a function to plot the annotation boxes onto an image

    input: boxes (array): numpy array of box annotations, as generated by the parse_annotation function

        image_path (string): pathway to the image file where boxes will be plotted on

    outputs: draws the image with the box annotations on it

    :param boxes:
    :param image_path:
    :return:
    """
    img = cv2.imread(image_path)

    for row in boxes:
        x, y, w, h = row
        cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,0), 1)

    cv2.imshow('image', img)

    cv2.waitKey(0)


#use the r character to read the string exactly as printed
# otherwise Python will attempt to interpret the backslashes as special characters/commands
test_path = r"C:\Users\bcarr\Documents\USD AAI\AAI 521 Computer Vision\UFPR-ALPR\UFPR-ALPR dataset\training\track0001\track0001[01].txt"

test_img_path = r"C:\Users\bcarr\Documents\USD AAI\AAI 521 Computer Vision\UFPR-ALPR\UFPR-ALPR dataset\training\track0001\track0001[01].png"

annotations, plate = parse_annotation(test_path)

draw_boxes(annotations, test_img_path)

"""
To do:

1) Check box dimensions in a file -- DONE
2) Check output format against YOLO requirements
3) Check other license plate character lengths (6? 7? 8? other?)
"""


